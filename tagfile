<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="class">
    <name>efscape::impl::BuildSim</name>
    <filename>classefscape_1_1impl_1_1_build_sim.html</filename>
    <base>efscape::utils::CommandOpt</base>
    <member kind="function">
      <type></type>
      <name>BuildSim</name>
      <anchorfile>classefscape_1_1impl_1_1_build_sim.html</anchorfile>
      <anchor>a2f854b6ce57f53fcd1ebe0fcfc8c706b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parse_options</name>
      <anchorfile>classefscape_1_1impl_1_1_build_sim.html</anchorfile>
      <anchor>af2413c0b9da317f5281773a0f7f0334f</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>execute</name>
      <anchorfile>classefscape_1_1impl_1_1_build_sim.html</anchorfile>
      <anchor>ae87508cbff152844bf4566860f295823</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>program_name</name>
      <anchorfile>classefscape_1_1impl_1_1_build_sim.html</anchorfile>
      <anchor>a7268d2069b5d9bca608f9131a3597ab4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>program_version</name>
      <anchorfile>classefscape_1_1impl_1_1_build_sim.html</anchorfile>
      <anchor>a405579c6547245358567a98cb15cdaae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>ProgramName</name>
      <anchorfile>classefscape_1_1impl_1_1_build_sim.html</anchorfile>
      <anchor>a448e8c5409dcf00e40f859ff150882ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>usage</name>
      <anchorfile>classefscape_1_1impl_1_1_build_sim.html</anchorfile>
      <anchor>a661cf413ed0b4618a99ca5f97dff45c9</anchor>
      <arglist>(int exit_value=0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>mC_modelTypeName</name>
      <anchorfile>classefscape_1_1impl_1_1_build_sim.html</anchorfile>
      <anchor>aa5a6bd6444cc9d1ed9a3c942b5cbc1dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>mC_modelName</name>
      <anchorfile>classefscape_1_1impl_1_1_build_sim.html</anchorfile>
      <anchor>a1afb000f087765459c041b0de703d245</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>efscape::impl::CellBroadcastConsumer</name>
    <filename>classefscape_1_1impl_1_1_cell_broadcast_consumer.html</filename>
    <base>efscape::impl::InputConsumer</base>
    <member kind="function">
      <type></type>
      <name>CellBroadcastConsumer</name>
      <anchorfile>classefscape_1_1impl_1_1_cell_broadcast_consumer.html</anchorfile>
      <anchor>a9051831e018f7ede1e1c3a8e09b2efec</anchor>
      <arglist>(PortType aC_InputPort, CELLSPACE *aCp_CellSpace)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classefscape_1_1impl_1_1_cell_broadcast_consumer.html</anchorfile>
      <anchor>ae78f9610ba3b36e93eed9a4d06ea6311</anchor>
      <arglist>(const adevs::Bag&lt; IO_Type &gt; &amp;aCr_input, adevs::Bag&lt; adevs::Event&lt; CellEvent &gt; &gt; &amp;aCCr_output)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PortType</type>
      <name>mC_InputPort</name>
      <anchorfile>classefscape_1_1impl_1_1_cell_broadcast_consumer.html</anchorfile>
      <anchor>ada8887563da7beb2d8283bcd6b728290</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CELLSPACE *</type>
      <name>mCp_CellSpace</name>
      <anchorfile>classefscape_1_1impl_1_1_cell_broadcast_consumer.html</anchorfile>
      <anchor>a0ab6d0c7b8edaaf3e31a490782980e6b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>efscape::impl::CellInputConsumer</name>
    <filename>classefscape_1_1impl_1_1_cell_input_consumer.html</filename>
    <base>efscape::impl::InputConsumer</base>
    <member kind="function">
      <type></type>
      <name>CellInputConsumer</name>
      <anchorfile>classefscape_1_1impl_1_1_cell_input_consumer.html</anchorfile>
      <anchor>a9364f38a3ef6aca6ecec4b43e66bb9fa</anchor>
      <arglist>(PortType aC_InputPort, adevs::Devs&lt; IO_Type &gt; *aCp_model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classefscape_1_1impl_1_1_cell_input_consumer.html</anchorfile>
      <anchor>affb4ed909a7a9c83b9cf9cf89e952a49</anchor>
      <arglist>(const adevs::Bag&lt; CellEvent &gt; &amp;aCr_input, adevs::Bag&lt; adevs::Event&lt; IO_Type &gt; &gt; &amp;aCCr_output)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PortType</type>
      <name>mC_InputPort</name>
      <anchorfile>classefscape_1_1impl_1_1_cell_input_consumer.html</anchorfile>
      <anchor>a45f720fa95a4dd6cb967c0ea14f054cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>adevs::Devs&lt; IO_Type &gt; *</type>
      <name>mCp_model</name>
      <anchorfile>classefscape_1_1impl_1_1_cell_input_consumer.html</anchorfile>
      <anchor>a862f6404b5f6d636982917789947c97b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>efscape::impl::ClockI</name>
    <filename>classefscape_1_1impl_1_1_clock_i.html</filename>
    <member kind="function">
      <type></type>
      <name>ClockI</name>
      <anchorfile>classefscape_1_1impl_1_1_clock_i.html</anchorfile>
      <anchor>a32d07818ea5f8343b3cf2ad890a34e3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClockI</name>
      <anchorfile>classefscape_1_1impl_1_1_clock_i.html</anchorfile>
      <anchor>a7e9bd066ce55624ecae639367fe224b3</anchor>
      <arglist>(const ClockI &amp;aCr_clock)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ClockI</name>
      <anchorfile>classefscape_1_1impl_1_1_clock_i.html</anchorfile>
      <anchor>a5896f4216c3654240e98e4f1609ce02d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>time</name>
      <anchorfile>classefscape_1_1impl_1_1_clock_i.html</anchorfile>
      <anchor>afae48e9cf4518eb42bdacba1822f036c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTime</name>
      <anchorfile>classefscape_1_1impl_1_1_clock_i.html</anchorfile>
      <anchor>ad56adb0b89587ff687aefb8e34edb115</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>time</name>
      <anchorfile>classefscape_1_1impl_1_1_clock_i.html</anchorfile>
      <anchor>a318baabbb94287c0f1c167ba91edc005</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>timeDelta</name>
      <anchorfile>classefscape_1_1impl_1_1_clock_i.html</anchorfile>
      <anchor>a52ab595f5942cf0f2dffccc4258a341f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>timeDelta</name>
      <anchorfile>classefscape_1_1impl_1_1_clock_i.html</anchorfile>
      <anchor>ad70602c0b67f97789bdfb226c4c15d3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>timeMax</name>
      <anchorfile>classefscape_1_1impl_1_1_clock_i.html</anchorfile>
      <anchor>a592f502df48c3ad52b275a3340ecb346</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>timeMax</name>
      <anchorfile>classefscape_1_1impl_1_1_clock_i.html</anchorfile>
      <anchor>a66d0dc1bf625981ce612b83a4b77ed03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boost::posix_time::ptime</type>
      <name>date_time</name>
      <anchorfile>classefscape_1_1impl_1_1_clock_i.html</anchorfile>
      <anchor>aa4376841304df4d9826fe6d9d4d17e97</anchor>
      <arglist>(double ad_time) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>base_date</name>
      <anchorfile>classefscape_1_1impl_1_1_clock_i.html</anchorfile>
      <anchor>a1b1b2bc639177f5b329c6e3c31af322a</anchor>
      <arglist>(const boost::posix_time::ptime &amp;aCr_datetime)</arglist>
    </member>
    <member kind="function">
      <type>boost::posix_time::time_duration</type>
      <name>units</name>
      <anchorfile>classefscape_1_1impl_1_1_clock_i.html</anchorfile>
      <anchor>a56b87537bd3d07bcb2fcd6d9988266ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>units</name>
      <anchorfile>classefscape_1_1impl_1_1_clock_i.html</anchorfile>
      <anchor>a2066311d9b12d9ae35cabf5a2e8053f6</anchor>
      <arglist>(const boost::posix_time::time_duration &amp;aCr_units)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>timeUnits</name>
      <anchorfile>classefscape_1_1impl_1_1_clock_i.html</anchorfile>
      <anchor>aa0db777b3186222ca62c66c510133797</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeUnits</name>
      <anchorfile>classefscape_1_1impl_1_1_clock_i.html</anchorfile>
      <anchor>adc8172275380e5839b157be776ddeb14</anchor>
      <arglist>(const char *acp_units)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>efscape::utils::CommandOpt</name>
    <filename>classefscape_1_1utils_1_1_command_opt.html</filename>
    <member kind="function">
      <type></type>
      <name>CommandOpt</name>
      <anchorfile>classefscape_1_1utils_1_1_command_opt.html</anchorfile>
      <anchor>aa07f3413ad10a1b3b539fed72f4fb595</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CommandOpt</name>
      <anchorfile>classefscape_1_1utils_1_1_command_opt.html</anchorfile>
      <anchor>acf8d1a370578d9cbb622355f7f844bb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>parse_options</name>
      <anchorfile>classefscape_1_1utils_1_1_command_opt.html</anchorfile>
      <anchor>ad0905844bb5e963eb2732fbd7f8621f6</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::program_options::options_description</type>
      <name>mC_description</name>
      <anchorfile>classefscape_1_1utils_1_1_command_opt.html</anchorfile>
      <anchor>a04c4155568056ea697aff15dc76119ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::program_options::options_description</type>
      <name>mC_extended_description</name>
      <anchorfile>classefscape_1_1utils_1_1_command_opt.html</anchorfile>
      <anchor>a140d5a5d355f1574124587073e8fb475</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::program_options::variables_map</type>
      <name>mC_variable_map</name>
      <anchorfile>classefscape_1_1utils_1_1_command_opt.html</anchorfile>
      <anchor>a478d261c486c0b9291bf5d100fe43e6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>efscape::impl::DigraphBuilder</name>
    <filename>classefscape_1_1impl_1_1_digraph_builder.html</filename>
    <class kind="struct">efscape::impl::DigraphBuilder::edge</class>
    <class kind="struct">efscape::impl::DigraphBuilder::node</class>
    <member kind="function">
      <type></type>
      <name>DigraphBuilder</name>
      <anchorfile>classefscape_1_1impl_1_1_digraph_builder.html</anchorfile>
      <anchor>a23d12690d9f9758bb4c56085c7292e67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classefscape_1_1impl_1_1_digraph_builder.html</anchorfile>
      <anchor>ab5ab940e56a65f32e13e7dffc65e9f65</anchor>
      <arglist>(std::string name, Json::Value modelValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coupling</name>
      <anchorfile>classefscape_1_1impl_1_1_digraph_builder.html</anchorfile>
      <anchor>a996021c66c629b87ae1f965f52c0dee8</anchor>
      <arglist>(std::string modelFrom, std::string portFrom, std::string modelTo, std::string portTo)</arglist>
    </member>
    <member kind="function">
      <type>Json::Value</type>
      <name>convert_to_json</name>
      <anchorfile>classefscape_1_1impl_1_1_digraph_builder.html</anchorfile>
      <anchor>aef9a64e5b5cd243ed9db0f4e9a18738e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DEVS *</type>
      <name>build_digraph_from_json</name>
      <anchorfile>classefscape_1_1impl_1_1_digraph_builder.html</anchorfile>
      <anchor>a2214d57f3718e55209d36951ab24ae82</anchor>
      <arglist>(const Json::Value &amp;aCr_value, DIGRAPH *aCp_digraph)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>efscape::impl::DigraphType</name>
    <filename>classefscape_1_1impl_1_1_digraph_type.html</filename>
    <base>efscape::impl::ModelType</base>
  </compound>
  <compound kind="struct">
    <name>efscape::impl::DigraphBuilder::edge</name>
    <filename>structefscape_1_1impl_1_1_digraph_builder_1_1edge.html</filename>
    <member kind="function">
      <type></type>
      <name>edge</name>
      <anchorfile>structefscape_1_1impl_1_1_digraph_builder_1_1edge.html</anchorfile>
      <anchor>abe15ffa124c5fa967b45647f513a8845</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>edge</name>
      <anchorfile>structefscape_1_1impl_1_1_digraph_builder_1_1edge.html</anchorfile>
      <anchor>a3e13b356d4d64893e58e49eca86eb9ee</anchor>
      <arglist>(node fromNode, node toNode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>edge</name>
      <anchorfile>structefscape_1_1impl_1_1_digraph_builder_1_1edge.html</anchorfile>
      <anchor>a61287778d228f5682d726f133fd44b3f</anchor>
      <arglist>(const edge &amp;aEdge)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert_from_json</name>
      <anchorfile>structefscape_1_1impl_1_1_digraph_builder_1_1edge.html</anchorfile>
      <anchor>a72e9c1e61ab0ee8a5d2d3efac2e95e76</anchor>
      <arglist>(const Json::Value &amp;aCr_value)</arglist>
    </member>
    <member kind="function">
      <type>Json::Value</type>
      <name>convert_to_json</name>
      <anchorfile>structefscape_1_1impl_1_1_digraph_builder_1_1edge.html</anchorfile>
      <anchor>abd69bb257ebbe5894e2b0fb83aae8680</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>node</type>
      <name>from</name>
      <anchorfile>structefscape_1_1impl_1_1_digraph_builder_1_1edge.html</anchorfile>
      <anchor>a30f34dda1f59c73cc3fd4d6caaea1802</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>node</type>
      <name>to</name>
      <anchorfile>structefscape_1_1impl_1_1_digraph_builder_1_1edge.html</anchorfile>
      <anchor>ae20cbf00ba4827c55e217576eb6accad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EfscapeClient</name>
    <filename>class_efscape_client.html</filename>
  </compound>
  <compound kind="class">
    <name>efscape::utils::Factory</name>
    <filename>classefscape_1_1utils_1_1_factory.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>bool</type>
      <name>registerType</name>
      <anchorfile>classefscape_1_1utils_1_1_factory.html</anchorfile>
      <anchor>a3f4b518d4b41a10383b8ac0fd3a3bc6a</anchor>
      <arglist>(const IdentifierType &amp;id, Json::Value properties=Json::Value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>registerType</name>
      <anchorfile>classefscape_1_1utils_1_1_factory.html</anchorfile>
      <anchor>a6791987f9d6f4de83dcbba1014e596e5</anchor>
      <arglist>(const IdentifierType &amp;id, boost::function&lt; BaseType *()&gt; aF_createObj, Json::Value properties=Json::Value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>registerTypeWithArgs</name>
      <anchorfile>classefscape_1_1utils_1_1_factory.html</anchorfile>
      <anchor>a285fecfecf687efbc8436753f2cc53b2</anchor>
      <arglist>(IdentifierType id, boost::function&lt; BaseType *(Json::Value)&gt; aF_createObj, Json::Value properties=Json::Value())</arglist>
    </member>
    <member kind="function">
      <type>BaseType *</type>
      <name>createObject</name>
      <anchorfile>classefscape_1_1utils_1_1_factory.html</anchorfile>
      <anchor>a4e4cc6531814be5a9953179659aceeee</anchor>
      <arglist>(const IdentifierType &amp;id, Json::Value args)</arglist>
    </member>
    <member kind="function">
      <type>BaseType *</type>
      <name>createObject</name>
      <anchorfile>classefscape_1_1utils_1_1_factory.html</anchorfile>
      <anchor>a28ea40740b9774e9bc94ab0ef9d9a2f2</anchor>
      <arglist>(const IdentifierType &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>Json::Value</type>
      <name>getProperties</name>
      <anchorfile>classefscape_1_1utils_1_1_factory.html</anchorfile>
      <anchor>a11991bff249eb7af2a7078e1453ede1c</anchor>
      <arglist>(IdentifierType aC_typename)</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; IdentifierType &gt;</type>
      <name>getTypeIDs</name>
      <anchorfile>classefscape_1_1utils_1_1_factory.html</anchorfile>
      <anchor>a9a35431e0339375974bcb293c68977c2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>efscape::impl::InputConsumer</name>
    <filename>classefscape_1_1impl_1_1_input_consumer.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>InputConsumer</name>
      <anchorfile>classefscape_1_1impl_1_1_input_consumer.html</anchorfile>
      <anchor>ad6efe582b039b4cc8e48b51a2cc8d649</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InputConsumer</name>
      <anchorfile>classefscape_1_1impl_1_1_input_consumer.html</anchorfile>
      <anchor>a07c53b88813bca9008f0d4d72362faa4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>adevs::ModelDecorator</name>
    <filename>classadevs_1_1_model_decorator.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ModelDecorator</name>
      <anchorfile>classadevs_1_1_model_decorator.html</anchorfile>
      <anchor>a00a5532329d10526c939e290c039563b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ModelDecorator</name>
      <anchorfile>classadevs_1_1_model_decorator.html</anchorfile>
      <anchor>a943ba06a50285d4632f8c92ead5574f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWrappedModel</name>
      <anchorfile>classadevs_1_1_model_decorator.html</anchorfile>
      <anchor>abca5d1787c85a2f24a63ad16cfa23552</anchor>
      <arglist>(Devs&lt; X &gt; *aCp_model)</arglist>
    </member>
    <member kind="function">
      <type>Devs&lt; X &gt; *</type>
      <name>getWrappedModel</name>
      <anchorfile>classadevs_1_1_model_decorator.html</anchorfile>
      <anchor>a46087a5ff6bf660306f1c3e4ebf5c634</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Devs&lt; X &gt; *</type>
      <name>getWrappedModel</name>
      <anchorfile>classadevs_1_1_model_decorator.html</anchorfile>
      <anchor>a839e0f0e6120105658d1713a91a82a41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getComponents</name>
      <anchorfile>classadevs_1_1_model_decorator.html</anchorfile>
      <anchor>af0b3167c21ba98a3eee738e008d430fe</anchor>
      <arglist>(Set&lt; Devs&lt; X &gt; * &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>route</name>
      <anchorfile>classadevs_1_1_model_decorator.html</anchorfile>
      <anchor>a91d880763abef45de35cd2a0d5f1a7a2</anchor>
      <arglist>(const X &amp;value, Devs&lt; X &gt; *model, Bag&lt; Event&lt; X &gt; &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>efscape::impl::ModelHomeI</name>
    <filename>classefscape_1_1impl_1_1_model_home_i.html</filename>
    <member kind="function">
      <type></type>
      <name>ModelHomeI</name>
      <anchorfile>classefscape_1_1impl_1_1_model_home_i.html</anchorfile>
      <anchor>abaf852ecd5c290abb521f44b3eda6f0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ModelHomeI</name>
      <anchorfile>classefscape_1_1impl_1_1_model_home_i.html</anchorfile>
      <anchor>ae7b49899c5194f8ccdbeb5adbaba2077</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DEVSPtr</type>
      <name>createModel</name>
      <anchorfile>classefscape_1_1impl_1_1_model_home_i.html</anchorfile>
      <anchor>aa88f094596c2eaa1d3f22bd40cd63578</anchor>
      <arglist>(std::string aC_classname)</arglist>
    </member>
    <member kind="function">
      <type>DEVSPtr</type>
      <name>createModelFromXML</name>
      <anchorfile>classefscape_1_1impl_1_1_model_home_i.html</anchorfile>
      <anchor>ae00d59e39aa0f377366ce0edec3d97c9</anchor>
      <arglist>(std::wstring aC_buffer)</arglist>
    </member>
    <member kind="function">
      <type>DEVSPtr</type>
      <name>createModelFromJSON</name>
      <anchorfile>classefscape_1_1impl_1_1_model_home_i.html</anchorfile>
      <anchor>ab61954757884032d814371167084e396</anchor>
      <arglist>(std::string aC_JSONstring)</arglist>
    </member>
    <member kind="function">
      <type>DEVSPtr</type>
      <name>createModelFromParameters</name>
      <anchorfile>classefscape_1_1impl_1_1_model_home_i.html</anchorfile>
      <anchor>a76cc69ca1322d7561bb7fd909c7f4bfb</anchor>
      <arglist>(std::string aC_ParameterString)</arglist>
    </member>
    <member kind="function">
      <type>model_factory &amp;</type>
      <name>getModelFactory</name>
      <anchorfile>classefscape_1_1impl_1_1_model_home_i.html</anchorfile>
      <anchor>a37a6819eecf7b0ae4e028986b1beac97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>command_factory &amp;</type>
      <name>getCommandFactory</name>
      <anchorfile>classefscape_1_1impl_1_1_model_home_i.html</anchorfile>
      <anchor>a9a5086446f98372adbb8b4371d7c80df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHomeDir</name>
      <anchorfile>classefscape_1_1impl_1_1_model_home_i.html</anchorfile>
      <anchor>a2caf611f6b1378742f0a50b3a495c41c</anchor>
      <arglist>(const char *acp_path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LoadLibrary</name>
      <anchorfile>classefscape_1_1impl_1_1_model_home_i.html</anchorfile>
      <anchor>a3677b50bfdf424c7a31cf4c273858a4b</anchor>
      <arglist>(const char *acp_libname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LoadLibraries</name>
      <anchorfile>classefscape_1_1impl_1_1_model_home_i.html</anchorfile>
      <anchor>ae22f3d24810912a6407e95da89e51b1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getHomeDir</name>
      <anchorfile>classefscape_1_1impl_1_1_model_home_i.html</anchorfile>
      <anchor>a4f1d9ea2f4f6a881a8d30b5033b20bfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static log4cxx::LoggerPtr &amp;</type>
      <name>getLogger</name>
      <anchorfile>classefscape_1_1impl_1_1_model_home_i.html</anchorfile>
      <anchor>a9e38caca7cf45d47301b72c1e8e49cb9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>efscape::server::ModelHomeTie</name>
    <filename>classefscape_1_1server_1_1_model_home_tie.html</filename>
    <member kind="function">
      <type>virtual ::efscape::ModelPrx</type>
      <name>create</name>
      <anchorfile>classefscape_1_1server_1_1_model_home_tie.html</anchorfile>
      <anchor>aaa3836c51b89f3d6a6ab0ffd51b233dd</anchor>
      <arglist>(const ::std::string &amp;, const Ice::Current &amp;)</arglist>
    </member>
    <member kind="function">
      <type>virtual ::efscape::ModelPrx</type>
      <name>createFromXML</name>
      <anchorfile>classefscape_1_1server_1_1_model_home_tie.html</anchorfile>
      <anchor>af3f1cbe397f3141aaba3ee85361bcf58</anchor>
      <arglist>(const ::std::wstring &amp;, const Ice::Current &amp;)</arglist>
    </member>
    <member kind="function">
      <type>virtual ::efscape::ModelPrx</type>
      <name>createFromJSON</name>
      <anchorfile>classefscape_1_1server_1_1_model_home_tie.html</anchorfile>
      <anchor>a2ae513ecfb483b478b089fbc414071df</anchor>
      <arglist>(const ::std::string &amp;, const Ice::Current &amp;)</arglist>
    </member>
    <member kind="function">
      <type>virtual ::efscape::ModelPrx</type>
      <name>createFromParameters</name>
      <anchorfile>classefscape_1_1server_1_1_model_home_tie.html</anchorfile>
      <anchor>a5dc1ce0356437d4b5d166879bcb8228a</anchor>
      <arglist>(const ::std::string &amp;, const Ice::Current &amp;)</arglist>
    </member>
    <member kind="function">
      <type>virtual ::efscape::ModelNameList</type>
      <name>getModelList</name>
      <anchorfile>classefscape_1_1server_1_1_model_home_tie.html</anchorfile>
      <anchor>a9e13d99d9355a8095e326944ebbaf23a</anchor>
      <arglist>(const Ice::Current &amp;)</arglist>
    </member>
    <member kind="function">
      <type>virtual ::std::string</type>
      <name>getModelInfo</name>
      <anchorfile>classefscape_1_1server_1_1_model_home_tie.html</anchorfile>
      <anchor>a85d76a583c4ed756abd5af68cf968bfe</anchor>
      <arglist>(const ::std::string &amp;, const Ice::Current &amp;)</arglist>
    </member>
    <member kind="function">
      <type>virtual ::efscape::SimulatorPrx</type>
      <name>createSim</name>
      <anchorfile>classefscape_1_1server_1_1_model_home_tie.html</anchorfile>
      <anchor>a55e837cc290089f0b3cbf7b0085437e7</anchor>
      <arglist>(const ::efscape::ModelPrx &amp;, const Ice::Current &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModelHomeTie</name>
      <anchorfile>classefscape_1_1server_1_1_model_home_tie.html</anchorfile>
      <anchor>a92ce99bceb79e901d5f43f3a224e5b0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ModelHomeTie</name>
      <anchorfile>classefscape_1_1server_1_1_model_home_tie.html</anchorfile>
      <anchor>a5796e93c6eeda5a4b5a75a74eeed88df</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>efscape::server::ModelTie</name>
    <filename>classefscape_1_1server_1_1_model_tie.html</filename>
    <member kind="function">
      <type></type>
      <name>ModelTie</name>
      <anchorfile>classefscape_1_1server_1_1_model_tie.html</anchorfile>
      <anchor>a1a45d54916ec9d9a666968ca1c61efc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModelTie</name>
      <anchorfile>classefscape_1_1server_1_1_model_tie.html</anchorfile>
      <anchor>a7008b5a0f8519cc093585e3bee1b9898</anchor>
      <arglist>(const efscape::impl::DEVSPtr &amp;aCp_model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModelTie</name>
      <anchorfile>classefscape_1_1server_1_1_model_tie.html</anchorfile>
      <anchor>ab33575478465414414582c8ba9f32c0f</anchor>
      <arglist>(const efscape::impl::DEVSPtr &amp;aCp_model, const char *acp_name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ModelTie</name>
      <anchorfile>classefscape_1_1server_1_1_model_tie.html</anchorfile>
      <anchor>aed5c330c51224633ee7ea0e025540eaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>virtual ::std::string</type>
      <name>getName</name>
      <anchorfile>classefscape_1_1server_1_1_model_tie.html</anchorfile>
      <anchor>a38b5064f86c1e84c7fe7ebe021968da7</anchor>
      <arglist>(const Ice::Current &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initialize</name>
      <anchorfile>classefscape_1_1server_1_1_model_tie.html</anchorfile>
      <anchor>aea7c48810347d14e9d4062e1cde199c1</anchor>
      <arglist>(const Ice::Current &amp;)</arglist>
    </member>
    <member kind="function">
      <type>virtual ::Ice::Double</type>
      <name>timeAdvance</name>
      <anchorfile>classefscape_1_1server_1_1_model_tie.html</anchorfile>
      <anchor>ac91cbece496f6a2f0c953003dc0ab5aa</anchor>
      <arglist>(const Ice::Current &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>internalTransition</name>
      <anchorfile>classefscape_1_1server_1_1_model_tie.html</anchorfile>
      <anchor>aaecd645a16cb0d14a7847c0b6e1689ea</anchor>
      <arglist>(const Ice::Current &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>externalTransition</name>
      <anchorfile>classefscape_1_1server_1_1_model_tie.html</anchorfile>
      <anchor>aab322c1fc33c43ac7fe0e308cad743d5</anchor>
      <arglist>(::Ice::Double, const ::efscape::Message &amp;, const Ice::Current &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>confluentTransition</name>
      <anchorfile>classefscape_1_1server_1_1_model_tie.html</anchorfile>
      <anchor>a4b3bb0d935485096de190e0c067435f5</anchor>
      <arglist>(const ::efscape::Message &amp;, const Ice::Current &amp;)</arglist>
    </member>
    <member kind="function">
      <type>virtual ::efscape::Message</type>
      <name>outputFunction</name>
      <anchorfile>classefscape_1_1server_1_1_model_tie.html</anchorfile>
      <anchor>add10a7ede7ce89708c2eaa88adb0d1db</anchor>
      <arglist>(const Ice::Current &amp;)</arglist>
    </member>
    <member kind="function">
      <type>virtual ::std::string</type>
      <name>getType</name>
      <anchorfile>classefscape_1_1server_1_1_model_tie.html</anchorfile>
      <anchor>abb6791e81cd41e9c035e3e1ba3aa7846</anchor>
      <arglist>(const Ice::Current &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>classefscape_1_1server_1_1_model_tie.html</anchorfile>
      <anchor>a76f7ae649a50d618f9c57ccb12e5464f</anchor>
      <arglist>(const std::string &amp;, const Ice::Current &amp;)</arglist>
    </member>
    <member kind="function">
      <type>virtual ::std::string</type>
      <name>saveJSON</name>
      <anchorfile>classefscape_1_1server_1_1_model_tie.html</anchorfile>
      <anchor>a24fd76636e6549bf89edbcaba0bf9a9e</anchor>
      <arglist>(const Ice::Current &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classefscape_1_1server_1_1_model_tie.html</anchorfile>
      <anchor>a533bea7f7925fd2816fe81718faa2650</anchor>
      <arglist>(const Ice::Current &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>outputEvent</name>
      <anchorfile>classefscape_1_1server_1_1_model_tie.html</anchorfile>
      <anchor>aafc5adc7d65d0a2852ed573b4f2bec43</anchor>
      <arglist>(adevs::Event&lt; efscape::impl::IO_Type &gt; x, double t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWrappedModel</name>
      <anchorfile>classefscape_1_1server_1_1_model_tie.html</anchorfile>
      <anchor>a955b204554231c4ffa73a77da4a3604a</anchor>
      <arglist>(const efscape::impl::DEVSPtr &amp;aCp_model)</arglist>
    </member>
    <member kind="function">
      <type>efscape::impl::DEVSPtr</type>
      <name>getWrappedModel</name>
      <anchorfile>classefscape_1_1server_1_1_model_tie.html</anchorfile>
      <anchor>a1c4729bb9529a3c8101a35a9223097fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>translateOutput</name>
      <anchorfile>classefscape_1_1server_1_1_model_tie.html</anchorfile>
      <anchor>ae8ceab47ecede08e5e24ad228e6940b1</anchor>
      <arglist>(const Ice::Current &amp;aCr_current, ::efscape::Message &amp;aCr_external_output)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>translateInput</name>
      <anchorfile>classefscape_1_1server_1_1_model_tie.html</anchorfile>
      <anchor>a8dd27265627094193b1711edaf9903f3</anchor>
      <arglist>(const Ice::Current &amp;aCr_current, const ::efscape::Message &amp;aCr_external_input, adevs::Bag&lt; adevs::Event&lt; efscape::impl::IO_Type &gt; &gt; &amp;aCr_internal_input)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; adevs::Simulator&lt; efscape::impl::IO_Type &gt; &gt;</type>
      <name>mCp_simulator</name>
      <anchorfile>classefscape_1_1server_1_1_model_tie.html</anchorfile>
      <anchor>a4c75e62991a791277023bc51511add87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>efscape::impl::DEVSPtr</type>
      <name>mCp_WrappedModel</name>
      <anchorfile>classefscape_1_1server_1_1_model_tie.html</anchorfile>
      <anchor>af55474db734ea7452ad644200cfaeb54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>adevs::Bag&lt; adevs::Event&lt; efscape::impl::IO_Type &gt; &gt;</type>
      <name>mCC_OutputBuffer</name>
      <anchorfile>classefscape_1_1server_1_1_model_tie.html</anchorfile>
      <anchor>a45d658150443426ef7d628dd3837db5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::efscape::impl::ClockIPtr</type>
      <name>mCp_clock</name>
      <anchorfile>classefscape_1_1server_1_1_model_tie.html</anchorfile>
      <anchor>ae76b1d86c5373afc489b068f180ee7e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>efscape::impl::ModelType</name>
    <filename>classefscape_1_1impl_1_1_model_type.html</filename>
    <member kind="function">
      <type></type>
      <name>ModelType</name>
      <anchorfile>classefscape_1_1impl_1_1_model_type.html</anchorfile>
      <anchor>acef07033e4687711fed5f32bc3c22680</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModelType</name>
      <anchorfile>classefscape_1_1impl_1_1_model_type.html</anchorfile>
      <anchor>aa484459c90fba0dd60570be89ff3cf0b</anchor>
      <arglist>(std::string aC_typeName, std::string aC_description, std::string aC_libraryName, int ai_version)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>mC_typeName</name>
      <anchorfile>classefscape_1_1impl_1_1_model_type.html</anchorfile>
      <anchor>a5adb937bc10f2dc1a6fb5d07891598e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>mC_description</name>
      <anchorfile>classefscape_1_1impl_1_1_model_type.html</anchorfile>
      <anchor>a878514644359bb9e2575b20553aa15b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>mC_libraryName</name>
      <anchorfile>classefscape_1_1impl_1_1_model_type.html</anchorfile>
      <anchor>a76f2dbfe25efe3a3cbf8d83bc24b9cc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mi_version</name>
      <anchorfile>classefscape_1_1impl_1_1_model_type.html</anchorfile>
      <anchor>aa82d2b21fd1fc2a78754b8112db217ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Json::Value</type>
      <name>mC_inputPorts</name>
      <anchorfile>classefscape_1_1impl_1_1_model_type.html</anchorfile>
      <anchor>a3cb5d15da26c8cb889fdb1a8bda8714f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Json::Value</type>
      <name>mC_outputPorts</name>
      <anchorfile>classefscape_1_1impl_1_1_model_type.html</anchorfile>
      <anchor>a93bf3634dba02f2eba5d73bdb911fd36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Json::Value</type>
      <name>mC_properties</name>
      <anchorfile>classefscape_1_1impl_1_1_model_type.html</anchorfile>
      <anchor>a1ab83a1b912689a4133296ce0f8f50cd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>efscape::impl::DigraphBuilder::node</name>
    <filename>structefscape_1_1impl_1_1_digraph_builder_1_1node.html</filename>
    <member kind="function">
      <type></type>
      <name>node</name>
      <anchorfile>structefscape_1_1impl_1_1_digraph_builder_1_1node.html</anchorfile>
      <anchor>ac46ebf12a54e9f9625f407b6132f76b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>node</name>
      <anchorfile>structefscape_1_1impl_1_1_digraph_builder_1_1node.html</anchorfile>
      <anchor>af101648f15bccc28a35859bfa05141f0</anchor>
      <arglist>(std::string aModel, std::string aPort)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>node</name>
      <anchorfile>structefscape_1_1impl_1_1_digraph_builder_1_1node.html</anchorfile>
      <anchor>ab0584413b823ce3f5374c228a1b7374e</anchor>
      <arglist>(const node &amp;aNode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert_from_json</name>
      <anchorfile>structefscape_1_1impl_1_1_digraph_builder_1_1node.html</anchorfile>
      <anchor>a2b48ed755a6316b0f8568115e53fa202</anchor>
      <arglist>(const Json::Value &amp;aCr_value)</arglist>
    </member>
    <member kind="function">
      <type>Json::Value</type>
      <name>convert_to_json</name>
      <anchorfile>structefscape_1_1impl_1_1_digraph_builder_1_1node.html</anchorfile>
      <anchor>a350f06c8413df33e4bbef4a0ac79ca60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>model</name>
      <anchorfile>structefscape_1_1impl_1_1_digraph_builder_1_1node.html</anchorfile>
      <anchor>a83af0c5e75b72e719bde45f1fe12356a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>port</name>
      <anchorfile>structefscape_1_1impl_1_1_digraph_builder_1_1node.html</anchorfile>
      <anchor>a46d42fc25a278be278a608f8b19e1fbb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>efscape::impl::OutputProducer</name>
    <filename>classefscape_1_1impl_1_1_output_producer.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>OutputProducer</name>
      <anchorfile>classefscape_1_1impl_1_1_output_producer.html</anchorfile>
      <anchor>af847249b0567a9992d4dd3b86b9e1776</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OutputProducer</name>
      <anchorfile>classefscape_1_1impl_1_1_output_producer.html</anchorfile>
      <anchor>ac311652137c2f9018aff4ba08aa90bac</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>efscape::impl::RepastModelWrapper</name>
    <filename>classefscape_1_1impl_1_1_repast_model_wrapper.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>RepastModelWrapper</name>
      <anchorfile>classefscape_1_1impl_1_1_repast_model_wrapper.html</anchorfile>
      <anchor>a9ff2f68aea79b8eb6ab19f67b4ad973e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RepastModelWrapper</name>
      <anchorfile>classefscape_1_1impl_1_1_repast_model_wrapper.html</anchorfile>
      <anchor>aeb5e498f12065d78d086c8af7471fc8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delta_int</name>
      <anchorfile>classefscape_1_1impl_1_1_repast_model_wrapper.html</anchorfile>
      <anchor>ad6a9edf3c16918581454c00733cdcac6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delta_ext</name>
      <anchorfile>classefscape_1_1impl_1_1_repast_model_wrapper.html</anchorfile>
      <anchor>a13c46e6fcfa3c8fb8168a717526a72f9</anchor>
      <arglist>(double e, const adevs::Bag&lt; IO_Type &gt; &amp;xb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delta_conf</name>
      <anchorfile>classefscape_1_1impl_1_1_repast_model_wrapper.html</anchorfile>
      <anchor>abe642dbfab23031cdafacc2d06dcae4b</anchor>
      <arglist>(const adevs::Bag&lt; IO_Type &gt; &amp;xb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>output_func</name>
      <anchorfile>classefscape_1_1impl_1_1_repast_model_wrapper.html</anchorfile>
      <anchor>a5a0c72c7c45b8a6299bdb82b18b9c846</anchor>
      <arglist>(adevs::Bag&lt; IO_Type &gt; &amp;yb)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ta</name>
      <anchorfile>classefscape_1_1impl_1_1_repast_model_wrapper.html</anchorfile>
      <anchor>a881d5fc90a828c62a32294fe29d38cf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gc_output</name>
      <anchorfile>classefscape_1_1impl_1_1_repast_model_wrapper.html</anchorfile>
      <anchor>adbaebc7f2c252d549d51d4a7cecf51a1</anchor>
      <arglist>(adevs::Bag&lt; IO_Type &gt; &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>efscape::server::RunServer</name>
    <filename>classefscape_1_1server_1_1_run_server.html</filename>
    <base>efscape::utils::CommandOpt</base>
    <member kind="function">
      <type>int</type>
      <name>parse_options</name>
      <anchorfile>classefscape_1_1server_1_1_run_server.html</anchorfile>
      <anchor>adc04d39dee72a0d49cebf74a838182bb</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>efscape::impl::RunSim</name>
    <filename>classefscape_1_1impl_1_1_run_sim.html</filename>
    <base>efscape::utils::CommandOpt</base>
    <member kind="function">
      <type>int</type>
      <name>parse_options</name>
      <anchorfile>classefscape_1_1impl_1_1_run_sim.html</anchorfile>
      <anchor>a187c747c6cbb6a1e55e89483f284f425</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>efscape::impl::SimRunner</name>
    <filename>classefscape_1_1impl_1_1_sim_runner.html</filename>
    <member kind="function">
      <type></type>
      <name>SimRunner</name>
      <anchorfile>classefscape_1_1impl_1_1_sim_runner.html</anchorfile>
      <anchor>a9b9e92214cef7f42f891a4e2456229cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimRunner</name>
      <anchorfile>classefscape_1_1impl_1_1_sim_runner.html</anchorfile>
      <anchor>aab79d18692dfc76c7f0a2f0ed3642202</anchor>
      <arglist>(Json::Value aC_parameters)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimRunner</name>
      <anchorfile>classefscape_1_1impl_1_1_sim_runner.html</anchorfile>
      <anchor>a8aa01a0c03d27212b8dae4261175712f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getModelTypeName</name>
      <anchorfile>classefscape_1_1impl_1_1_sim_runner.html</anchorfile>
      <anchor>ad06e85dfb6ff8fd2649bf69233f01302</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getModelName</name>
      <anchorfile>classefscape_1_1impl_1_1_sim_runner.html</anchorfile>
      <anchor>a4d800be00d11f870e4f8a8ed17164a83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ClockIPtr &amp;</type>
      <name>getClockIPtr</name>
      <anchorfile>classefscape_1_1impl_1_1_sim_runner.html</anchorfile>
      <anchor>adaf3b28e11fb074a70cdb68ff2d818c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ClockIPtr &amp;</type>
      <name>getClockIPtr</name>
      <anchorfile>classefscape_1_1impl_1_1_sim_runner.html</anchorfile>
      <anchor>a2a3c649f0c1603e7ad80e65b63800126</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClockIPtr</name>
      <anchorfile>classefscape_1_1impl_1_1_sim_runner.html</anchorfile>
      <anchor>a341a92429e2fa4ccbc7d1deb983f8739</anchor>
      <arglist>(const ClockIPtr &amp;aCr_clock)</arglist>
    </member>
    <member kind="function">
      <type>const ClockI &amp;</type>
      <name>getClock</name>
      <anchorfile>classefscape_1_1impl_1_1_sim_runner.html</anchorfile>
      <anchor>a4fa863b7bb6b6c54eb17e4bf3b87eddc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delta_int</name>
      <anchorfile>classefscape_1_1impl_1_1_sim_runner.html</anchorfile>
      <anchor>a1541e60bcefa948da25f11eac466a04a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delta_ext</name>
      <anchorfile>classefscape_1_1impl_1_1_sim_runner.html</anchorfile>
      <anchor>a1f080f85d3a8a6052d584bd28cbff5c5</anchor>
      <arglist>(double e, const adevs::Bag&lt; IO_Type &gt; &amp;xb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delta_conf</name>
      <anchorfile>classefscape_1_1impl_1_1_sim_runner.html</anchorfile>
      <anchor>ac049d0556cc3c43dbe1762bcfb902ae0</anchor>
      <arglist>(const adevs::Bag&lt; IO_Type &gt; &amp;xb)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ta</name>
      <anchorfile>classefscape_1_1impl_1_1_sim_runner.html</anchorfile>
      <anchor>adeb17fbfb88502b438233904f4bfae4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translateInput</name>
      <anchorfile>classefscape_1_1impl_1_1_sim_runner.html</anchorfile>
      <anchor>a8e78a22e7dee6c5b2ae30a65a14b76bd</anchor>
      <arglist>(const adevs::Bag&lt; IO_Type &gt; &amp;external_input, adevs::Bag&lt; adevs::Event&lt; IO_Type &gt; &gt; &amp;internal_input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translateOutput</name>
      <anchorfile>classefscape_1_1impl_1_1_sim_runner.html</anchorfile>
      <anchor>ab369f77bd7eb8ef036935cad4969ff28</anchor>
      <arglist>(const adevs::Bag&lt; adevs::Event&lt; IO_Type &gt; &gt; &amp;internal_output, adevs::Bag&lt; IO_Type &gt; &amp;external_output)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gc_input</name>
      <anchorfile>classefscape_1_1impl_1_1_sim_runner.html</anchorfile>
      <anchor>a9650a7cf35c4aeefbc9068ad52cd2c49</anchor>
      <arglist>(adevs::Bag&lt; adevs::Event&lt; IO_Type &gt; &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gc_output</name>
      <anchorfile>classefscape_1_1impl_1_1_sim_runner.html</anchorfile>
      <anchor>a3a3d00ed4ed6b2caaf7de13a97188ca2</anchor>
      <arglist>(adevs::Bag&lt; IO_Type &gt; &amp;g)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const efscape::impl::PortType</type>
      <name>clock_in</name>
      <anchorfile>classefscape_1_1impl_1_1_sim_runner.html</anchorfile>
      <anchor>ad44ea4c0b9db3a6b01b90ca94030c6e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const efscape::impl::PortType</type>
      <name>properties_in</name>
      <anchorfile>classefscape_1_1impl_1_1_sim_runner.html</anchorfile>
      <anchor>af3f51477fcd951088994e9d882b45311</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>createModel</name>
      <anchorfile>classefscape_1_1impl_1_1_sim_runner.html</anchorfile>
      <anchor>ac6996ee620751304ebd2eea102b876f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ClockIPtr</type>
      <name>mCp_ClockI</name>
      <anchorfile>classefscape_1_1impl_1_1_sim_runner.html</anchorfile>
      <anchor>ac575512f7e03b9746f4dde6552b7794b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>efscape::impl::SimRunnerType</name>
    <filename>classefscape_1_1impl_1_1_sim_runner_type.html</filename>
    <base>efscape::impl::ModelType</base>
  </compound>
  <compound kind="class">
    <name>efscape::server::SimulatorI</name>
    <filename>classefscape_1_1server_1_1_simulator_i.html</filename>
    <member kind="function">
      <type></type>
      <name>SimulatorI</name>
      <anchorfile>classefscape_1_1server_1_1_simulator_i.html</anchorfile>
      <anchor>a34bac91f4a133db44512f77461d13d55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimulatorI</name>
      <anchorfile>classefscape_1_1server_1_1_simulator_i.html</anchorfile>
      <anchor>a4440dc1150ddf1ea14999a62aba42b97</anchor>
      <arglist>(const ::efscape::ModelPrx &amp;aCp_model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimulatorI</name>
      <anchorfile>classefscape_1_1server_1_1_simulator_i.html</anchorfile>
      <anchor>ab35ce635653fa82454ba2a6da6ef4520</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>start</name>
      <anchorfile>classefscape_1_1server_1_1_simulator_i.html</anchorfile>
      <anchor>a73534ed6482f639ac941d3a1e43c195d</anchor>
      <arglist>(const Ice::Current &amp;)</arglist>
    </member>
    <member kind="function">
      <type>virtual ::Ice::Double</type>
      <name>nextEventTime</name>
      <anchorfile>classefscape_1_1server_1_1_simulator_i.html</anchorfile>
      <anchor>a9d986a5c0c8db95575c9e16de8957f38</anchor>
      <arglist>(const Ice::Current &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>execNextEvent</name>
      <anchorfile>classefscape_1_1server_1_1_simulator_i.html</anchorfile>
      <anchor>a9bf9e841fb55fa3cdf5c92b4fa766a34</anchor>
      <arglist>(const Ice::Current &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeNextOutput</name>
      <anchorfile>classefscape_1_1server_1_1_simulator_i.html</anchorfile>
      <anchor>abad644bd34fcfd9ecc9d51260be3b957</anchor>
      <arglist>(const Ice::Current &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeNextState</name>
      <anchorfile>classefscape_1_1server_1_1_simulator_i.html</anchorfile>
      <anchor>afe91422264ab1607081ab1557a8d4d69</anchor>
      <arglist>(::Ice::Double, const ::efscape::Message &amp;, const Ice::Current &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>halt</name>
      <anchorfile>classefscape_1_1server_1_1_simulator_i.html</anchorfile>
      <anchor>aa8ed6027156bd2edeec30e9cddb9f107</anchor>
      <arglist>(const Ice::Current &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classefscape_1_1server_1_1_simulator_i.html</anchorfile>
      <anchor>a730a16b4443499380bfff4ecc30d2d36</anchor>
      <arglist>(const Ice::Current &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>efscape::utils::Singleton</name>
    <filename>classefscape_1_1utils_1_1_singleton.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>efscape::impl::Singleton</name>
    <filename>classefscape_1_1impl_1_1_singleton.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>cereal::specialize&lt; Archive, efscape::impl::ATOMIC, cereal::specialization::non_member_serialize &gt;</name>
    <filename>structcereal_1_1specialize_3_01_archive_00_01efscape_1_1impl_1_1_a_t_o_m_i_c_00_01cereal_1_1spece3d6a5aeb4d296617619aa4d4ef6f9cc.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>cereal::specialize&lt; Archive, efscape::impl::DIGRAPH, cereal::specialization::non_member_load_save &gt;</name>
    <filename>structcereal_1_1specialize_3_01_archive_00_01efscape_1_1impl_1_1_d_i_g_r_a_p_h_00_01cereal_1_1sp5a06aeebcd2bc72336251d42dbeb3c5e.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>cereal::specialize&lt; Archive, efscape::impl::ModelWrapperBase, cereal::specialization::non_member_load_save &gt;</name>
    <filename>structcereal_1_1specialize_3_01_archive_00_01efscape_1_1impl_1_1_model_wrapper_base_00_01cereal_1d1d230f71cedff751ccc390533f6da6.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>cereal::specialize&lt; Archive, efscape::impl::NETWORK, cereal::specialization::non_member_serialize &gt;</name>
    <filename>structcereal_1_1specialize_3_01_archive_00_01efscape_1_1impl_1_1_n_e_t_w_o_r_k_00_01cereal_1_1spf7865099f329de2d20541d03caf3f526.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>cereal::specialize&lt; Archive, efscape::impl::SimRunner, cereal::specialization::member_serialize &gt;</name>
    <filename>structcereal_1_1specialize_3_01_archive_00_01efscape_1_1impl_1_1_sim_runner_00_01cereal_1_1specid48c3a664dfd721dab43a7e716a4e831.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>efscape</title>
    <filename>index</filename>
  </compound>
</tagfile>
